from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, CallbackQueryHandler
from telegram.error import BadRequest

from bot.data import (
    get_schedule_for_day,
    get_subject_by_key,
    get_tomorrow_day_key,
    get_day_label,
    SUBJECTS,
    Subject,
    SCHEDULE,
)
from bot.keyboards import (
    build_main_menu_keyboard,
    build_subjects_keyboard,
    build_days_keyboard,
    build_subjects_keyboard_with_prefix,
    build_days_keyboard_with_prefix,
    build_edit_schedule_actions_keyboard,
    build_edit_lessons_keyboard,
    build_delete_indices_keyboard,
    build_admin_menu_keyboard,
    build_back_to_main_only_keyboard,
    build_manage_days_keyboard,
    build_days_to_create_keyboard,
    build_days_to_delete_keyboard,
    build_subjects_keyboard_for_day_add,
)
from bot.storage import load_data, save_data
from bot.config import get_settings


async def safe_edit_message(query, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'Message is not modified'"""
    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
            await query.answer("‚úì")
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            raise


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_first_name = update.effective_user.first_name if update.effective_user else ""
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram-–±–æ—Ç.\n"
        "- –û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –µ–≥–æ –ø–æ–≤—Ç–æ—Ä—é.\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
    )
    if user_first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n" + greeting

    await update.message.reply_text(
        greeting,
        reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update)),
    )  # type: ignore[union-attr]


async def admin_reload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    settings = get_settings()
    if settings.admin_user_id and update.effective_user and update.effective_user.id != settings.admin_user_id:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")  # type: ignore[union-attr]
        return
    load_data()
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ data.json")  # type: ignore[union-attr]


async def admin_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    settings = get_settings()
    if settings.admin_user_id and update.effective_user and update.effective_user.id != settings.admin_user_id:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")  # type: ignore[union-attr]
        return
    save_data()
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ data.json")  # type: ignore[union-attr]


def _is_admin(update: Update) -> bool:
    settings = get_settings()
    if not settings.admin_user_id:
        return True  # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –∑–∞–¥–∞–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç
    if not update.effective_user:
        return False
    return update.effective_user.id == settings.admin_user_id


async def _send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    markup = build_main_menu_keyboard(is_admin=_is_admin(update))
    query = update.callback_query
    if query and query.message:
        await query.message.reply_text(text, reply_markup=markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=markup)


def _slugify_key(name: str) -> str:
    mapping = {
        "–∞": "a", "–±": "b", "–≤": "v", "–≥": "g", "–¥": "d",
        "–µ": "e", "—ë": "e", "–∂": "zh", "–∑": "z", "–∏": "i",
        "–π": "y", "–∫": "k", "–ª": "l", "–º": "m", "–Ω": "n",
        "–æ": "o", "–ø": "p", "—Ä": "r", "—Å": "s", "—Ç": "t",
        "—É": "u", "—Ñ": "f", "—Ö": "h", "—Ü": "c", "—á": "ch",
        "—à": "sh", "—â": "sch", "—ä": "", "—ã": "y", "—å": "",
        "—ç": "e", "—é": "yu", "—è": "ya",
    }
    s = name.strip().lower()
    res_chars: list[str] = []
    for ch in s:
        if ch in mapping:
            res_chars.append(mapping[ch])
        elif ch.isalnum():
            res_chars.append(ch)
        elif ch in [" ", "-", "/", "\\", ",", ".", ":", ";", "(", ")"]:
            res_chars.append("_")
        # else: skip other symbols
    key = "".join(res_chars)
    key = "_".join(filter(None, key.split("_")))  # collapse repeats
    key = key.strip("_")
    return key or "subj"


def _make_unique_key(base_key: str) -> str:
    key = base_key
    idx = 2
    while key in SUBJECTS:
        key = f"{base_key}_{idx}"
        idx += 1
    return key


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç."
    )
    await update.message.reply_text(
        help_text,
        reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update)),
    )  # type: ignore[union-attr]


async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –î–ó
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    user_data = context.user_data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìö –ü—Ä–µ–¥–º–µ—Ç—ã":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", 
            reply_markup=build_subjects_keyboard()
        )
        return
    elif text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", 
            reply_markup=build_days_keyboard()
        )
        return
    elif text == "üìù –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        day_key = get_tomorrow_day_key()
        day_label = get_day_label(day_key)
        schedule = get_schedule_for_day(day_key)
        if not schedule:
            text_msg = f"–ù–∞ {day_label} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
        else:
            lines = [f"–î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day_label}):"]
            for order, subject in schedule:
                lines.append(f"{order}. <b>{subject.name}</b>: {subject.homework}")
            text_msg = "\n".join(lines)
        await update.message.reply_text(
            text_msg,
            reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update)),
            parse_mode=ParseMode.HTML,
        )
        return
    elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω":
        if not _is_admin(update):
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await update.message.reply_text(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", 
            reply_markup=build_admin_menu_keyboard()
        )
        return
    
    pending_subject_key: str | None = user_data.get("edit_hw_subject")  # type: ignore[assignment]
    if pending_subject_key:
        if not _is_admin(update):
            await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.", reply_markup=build_main_menu_keyboard())
            user_data.pop("edit_hw_subject", None)
            return

        subject = SUBJECTS.get(pending_subject_key)
        if not subject:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=build_main_menu_keyboard())
            user_data.pop("edit_hw_subject", None)
            return

        new_hw = update.message.text.strip()
        SUBJECTS[pending_subject_key] = Subject(key=subject.key, name=subject.name, homework=new_hw)
        save_data()
        await _send_main_menu(update, context, f"–î–ó –¥–ª—è {subject.name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        user_data.pop("edit_hw_subject", None)
        return

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    rename_key: str | None = user_data.get("rename_subject_key")  # type: ignore[assignment]
    if rename_key:
        if not _is_admin(update):
            await update.message.reply_text("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.", reply_markup=build_main_menu_keyboard())
            user_data.pop("rename_subject_key", None)
            return
        subject = SUBJECTS.get(rename_key)
        if not subject:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=build_main_menu_keyboard())
            user_data.pop("rename_subject_key", None)
            return
        new_name = update.message.text.strip()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è, –∫–ª—é—á –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
        SUBJECTS[rename_key] = Subject(key=subject.key, name=new_name, homework=subject.homework)
        save_data()
        await _send_main_menu(update, context, f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {subject.name} ‚Üí {new_name}")
        user_data.pop("rename_subject_key", None)
        return

    # –û–±—ã—á–Ω—ã–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    if user_data.get("await_new_subject") or user_data.get("await_new_subject_simple"):
        if not _is_admin(update):
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.", reply_markup=build_back_to_main_only_keyboard())
            user_data.pop("await_new_subject", None)
            user_data.pop("await_new_subject_simple", None)
            return
        raw = update.message.text.strip()
        if user_data.get("await_new_subject"):
            parts = [p.strip() for p in raw.split(";")]
            if len(parts) < 2:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –∫–ª—é—á;–Ω–∞–∑–≤–∞–Ω–∏–µ;–¥–∑ (–¥–∑ –º–æ–∂–Ω–æ –ø—É—Å—Ç—ã–º)",
                    reply_markup=build_back_to_main_only_keyboard(),
                )
                user_data.pop("await_new_subject", None)
                user_data.pop("await_new_subject_simple", None)
                return
            key = parts[0]
            name = parts[1]
            hw = parts[2] if len(parts) >= 3 else ""
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ù–∞–∑–≤–∞–Ω–∏–µ: –î–ó"
            if ":" in raw:
                name, hw = [p.strip() for p in raw.split(":", 1)]
            else:
                name, hw = raw, ""
            key = _make_unique_key(_slugify_key(name))
        if not key or not name:
            await update.message.reply_text("–ö–ª—é—á –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", reply_markup=build_back_to_main_only_keyboard())
            user_data.pop("await_new_subject", None)
            user_data.pop("await_new_subject_simple", None)
            return
        if key in SUBJECTS:
            await update.message.reply_text("–¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=build_back_to_main_only_keyboard())
            user_data.pop("await_new_subject", None)
            user_data.pop("await_new_subject_simple", None)
            return
        SUBJECTS[key] = Subject(key=key, name=name, homework=hw)
        save_data()
        await _send_main_menu(update, context, f"–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {name} (–∫–ª—é—á: {key})")
        user_data.pop("await_new_subject", None)
        user_data.pop("await_new_subject_simple", None)
        return

        await update.message.reply_text(update.message.text)


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /help",
        reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update)),
    )  # type: ignore[union-attr]


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    data = query.data or ""

    if data == "menu:admin":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=build_admin_menu_keyboard()
        )
    elif data == "menu:subjects":
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=build_subjects_keyboard()
        )
    elif data == "menu:day":
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=build_days_keyboard()
        )
    elif data == "menu:tomorrow":
        day_key = get_tomorrow_day_key()
        day_label = get_day_label(day_key)
        schedule = get_schedule_for_day(day_key)
        if not schedule:
            text = f"–ù–∞ {day_label} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
        else:
            lines = [f"–î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({day_label}):"]
            for order, subject in schedule:
                lines.append(f"{order}. <b>{subject.name}</b>: {subject.homework}")
            text = "\n".join(lines)
        await query.edit_message_text(
            text=text,
            reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update)),
            parse_mode=ParseMode.HTML,
        )
    elif data == "menu:edit_hw":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –î–ó:",
            reply_markup=build_subjects_keyboard_with_prefix("edit:hw:"),
        )
    elif data == "menu:edit_sched":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=build_days_keyboard_with_prefix("edit:sched:day:"),
        )
    elif data == "menu:rename_subj":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
            reply_markup=build_subjects_keyboard_with_prefix("edit:rename:"),
        )
    elif data == "menu:add_subject":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text=(
                "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n"
                "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –î–ó —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ: –î–ó'.\n"
                "–ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            ),
            reply_markup=build_back_to_main_only_keyboard(),
        )
        context.user_data["await_new_subject_simple"] = True
    elif data == "menu:days_manage":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏:",
            reply_markup=build_manage_days_keyboard(),
        )
    elif data == "menu:days_manage:create":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
            reply_markup=build_days_to_create_keyboard(),
        )
    elif data == "menu:days_manage:delete":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=build_days_to_delete_keyboard(),
        )
    elif data == "menu:del_subject":
        if not _is_admin(update):
            await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=build_subjects_keyboard_with_prefix("edit:del_subj:"),
        )


async def subject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    data = query.data or ""
    if not data.startswith("subject:"):
        return
    key = data.split(":", 1)[1]
    subject = get_subject_by_key(key)
    if not subject:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        return

    # –ù–∞–π—Ç–∏ –¥–Ω–∏, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç
    from bot.data import get_days_for_subject

    days = get_days_for_subject(key)
    schedule_text = "\n".join([f"- {day} (—É—Ä–æ–∫ {order})" for day, order in days]) or "‚Äî"
    text = (
        f"<b>{subject.name}</b>\n"
        f"–î–ó: {subject.homework}\n\n"
        f"–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n{schedule_text}"
    )
    await query.edit_message_text(
        text=text, reply_markup=build_subjects_keyboard(), parse_mode=ParseMode.HTML
    )


async def day_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    data = query.data or ""
    if not data.startswith("day:"):
        return
    day_key = data.split(":", 1)[1]
    day_label = get_day_label(day_key)
    schedule = get_schedule_for_day(day_key)
    if not schedule:
        text = f"–ù–∞ {day_label} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
    else:
        lines = [f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_label}:"]
        for order, subject in schedule:
            lines.append(f"{order}. {subject.name}")
        text = "\n".join(lines)

    await query.edit_message_text(
        text=text, reply_markup=build_days_keyboard()
    )


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.message.reply_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
        reply_markup=build_main_menu_keyboard(is_admin=_is_admin(update))
    )
    await query.answer()


def _render_day_schedule(day_key: str) -> str:
    day_label = get_day_label(day_key)
    schedule = get_schedule_for_day(day_key)
    if not schedule:
        return f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {day_label}\n–ù–∞ {day_label} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
    lines = [f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {day_label}"]
    for order, subject in schedule:
        lines.append(f"{order}. {subject.name}")
    return "\n".join(lines)


async def edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    raw = query.data or ""
    data = raw.split(":")
    raw_lc = raw.lower()
    if not _is_admin(update):
        await query.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return

    # Patterns:
    # edit:hw:<subject_key>
    # edit:rename:<subject_key>
    # edit:del_subj:<subject_key>
    # edit:sched:day:<day_key>
    # edit:sched:add:<day_key>
    # edit:sched:add:<day_key>:<subject_key>
    # edit:sched:del:<day_key>
    # edit:sched:del:<day_key>:<index>
    # edit:sched:clear:<day_key>
    # edit:days:create:<day_key>
    # edit:days:delete:<day_key>

    # Backward/defensive handling for possible stale buttons
    if raw in ("edit:add_subject", "edit:create_subject") or (
        ("add" in raw_lc or "create" in raw_lc) and ("subj" in raw_lc or "subject" in raw_lc)
    ):
        await query.edit_message_text(
            text=(
                "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n"
                "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –î–ó —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ: '–ù–∞–∑–≤–∞–Ω–∏–µ: –î–ó'.\n"
                "–ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            ),
            reply_markup=build_back_to_main_only_keyboard(),
        )
        context.user_data["await_new_subject_simple"] = True
        return

    # Fast-path: adding subject directly edit:sched:add:<subject_key>
    if raw.startswith("edit:sched:add:") and len(data) == 4:
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        subject_key = data[3]
        if subject_key not in SUBJECTS:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
            return
        SCHEDULE.setdefault(day_key, []).append(subject_key)
        save_data()
        await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
        await safe_edit_message(
            query,
            text=_render_day_schedule(day_key),
            reply_markup=build_edit_schedule_actions_keyboard(day_key),
        )
        return

    # Fast-path: clear day edit:sched:days:clear
    if raw == "edit:sched:days:clear":
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        SCHEDULE[day_key] = []
        save_data()
        await safe_edit_message(
            query,
            text=_render_day_schedule(day_key),
            reply_markup=build_edit_schedule_actions_keyboard(day_key),
        )
        return

    # Fast-path: show subjects for adding edit:sched:add
    if raw == "edit:sched:add":
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=build_subjects_keyboard_with_prefix("edit:sched:add:"),
        )
        return

    # Fast-path: show lessons for deletion edit:sched:del
    if raw == "edit:sched:del":
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=build_delete_indices_keyboard(day_key),
        )
        return

    # Fast-path: delete specific lesson edit:sched:del_choose:<index>
    if raw.startswith("edit:sched:del_choose:") and len(data) == 4:
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        try:
            idx = int(data[3])
        except ValueError:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        items = SCHEDULE.get(day_key, [])
        if 1 <= idx <= len(items):
            del items[idx - 1]
            save_data()
            await safe_edit_message(
                query,
                text=_render_day_schedule(day_key),
                reply_markup=build_edit_schedule_actions_keyboard(day_key),
            )
        return

    # Fast-path: show lessons for editing edit:sched:edit
    if raw == "edit:sched:edit":
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=build_edit_lessons_keyboard(day_key),
        )
        return

    # Fast-path: edit specific lesson edit:sched:edit_choose:<index>
    if raw.startswith("edit:sched:edit_choose:") and len(data) == 4:
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        try:
            idx = int(data[3])
        except ValueError:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
            return
        items = SCHEDULE.get(day_key, [])
        if not (1 <= idx <= len(items)):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–º–µ–Ω—ã
        context.user_data["edit_lesson_index"] = idx - 1
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã:",
            reply_markup=build_subjects_keyboard_with_prefix("edit:sched:replace:"),
        )
        return

    # Fast-path: replace lesson edit:sched:replace:<subject_key>
    if raw.startswith("edit:sched:replace:") and len(data) == 4:
        day_key = context.user_data.get("edit_sched_day")
        if not isinstance(day_key, str) or not day_key:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
            return
        lesson_idx = context.user_data.get("edit_lesson_index")
        if lesson_idx is None:
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —É—Ä–æ–∫")
            return
        subject_key = data[3]
        if subject_key not in SUBJECTS:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
            return
        items = SCHEDULE.get(day_key, [])
        if 0 <= lesson_idx < len(items):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
            if items[lesson_idx] == subject_key:
                await query.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return
            items[lesson_idx] = subject_key
            save_data()
            await query.answer("–£—Ä–æ–∫ –∏–∑–º–µ–Ω—ë–Ω")
            await safe_edit_message(
                query,
                text=_render_day_schedule(day_key),
                reply_markup=build_edit_schedule_actions_keyboard(day_key),
            )
        else:
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞")
        return

    if len(data) >= 2 and data[1] == "hw":
        if len(data) == 3:
            subject_key = data[2]
            subject = SUBJECTS.get(subject_key)
            if not subject:
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
                return
            context.user_data["edit_hw_subject"] = subject_key
            await query.edit_message_text(
                text=f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –î–ó –¥–ª—è {subject.name} —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
                reply_markup=build_back_to_main_only_keyboard(),
            )
        return

    if len(data) >= 2 and data[1] == "rename":
        if len(data) == 3:
            subject_key = data[2]
            subject = SUBJECTS.get(subject_key)
            if not subject:
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
                return
            context.user_data["rename_subject_key"] = subject_key
            await query.edit_message_text(
                text=f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject.name}",
                reply_markup=build_back_to_main_only_keyboard(),
            )
        return

    if len(data) >= 2 and data[1] == "del_subj":
        if len(data) == 3:
            subject_key = data[2]
            subject = SUBJECTS.get(subject_key)
            if not subject:
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
                return
            # –£–¥–∞–ª—è–µ–º –∏–∑ SUBJECTS –∏ –∏–∑ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            SUBJECTS.pop(subject_key, None)
            for dk, keys in list(SCHEDULE.items()):
                SCHEDULE[dk] = [k for k in keys if k != subject_key]
            save_data()
            await _send_main_menu(update, context, f"–ü—Ä–µ–¥–º–µ—Ç '{subject.name}' —É–¥–∞–ª—ë–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    # Fast-path: select day for editing schedule ‚Üí —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if raw.startswith("edit:sched:day:"):
        parts = raw.split(":", 3)
        if len(parts) >= 4:
            day_key = parts[3]
            context.user_data["edit_sched_day"] = day_key
            await query.edit_message_text(
                text=f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ {get_day_label(day_key)}:",
                reply_markup=build_subjects_keyboard_for_day_add(day_key),
            )
            return

    if len(data) >= 2 and data[1] == "sched":
        action = data[2] if len(data) >= 3 else ""
        if action == "day" and len(data) >= 4:
            day_key = data[3]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            context.user_data["edit_sched_day"] = day_key
            await query.edit_message_text(
                text=f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ {get_day_label(day_key)}:",
                reply_markup=build_subjects_keyboard_for_day_add(day_key),
            )
            return

    if len(data) >= 2 and data[1] == "days":
        action = data[2] if len(data) >= 3 else ""
        if action == "create" and len(data) == 4:
            dk = data[3]
            if dk not in SCHEDULE:
                SCHEDULE[dk] = []
                save_data()
            await _send_main_menu(update, context, f"–î–µ–Ω—å —Å–æ–∑–¥–∞–Ω: {get_day_label(dk)}")
            return
        if action == "delete" and len(data) == 4:
            dk = data[3]
            if dk in SCHEDULE:
                del SCHEDULE[dk]
                save_data()
            await _send_main_menu(update, context, f"–î–µ–Ω—å —É–¥–∞–ª—ë–Ω: {get_day_label(dk)}")
            return

        if action == "add":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –¥–µ–Ω—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            day_key = context.user_data.get("edit_sched_day")
            if not isinstance(day_key, str) or not day_key:
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
                return
            # edit:sched:add ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if len(data) == 3:
                await query.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                    reply_markup=build_subjects_keyboard_with_prefix("edit:sched:add:"),
                )
                return
            # edit:sched:add:<subject_key> ‚Üí –¥–æ–±–∞–≤–∏—Ç—å
            if len(data) == 4:
                subject_key = data[3]
                if subject_key not in SUBJECTS:
                    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
                    return
                SCHEDULE.setdefault(day_key, []).append(subject_key)
                save_data()
                await query.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
                await query.edit_message_text(
                    text=_render_day_schedule(day_key),
                    reply_markup=build_edit_schedule_actions_keyboard(day_key),
                )
                return

        if action == "del":
            day_key = context.user_data.get("edit_sched_day")
            if not isinstance(day_key, str) or not day_key:
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
                return
            if len(data) == 3:
                await query.edit_message_text(
                    text="–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=build_delete_indices_keyboard(day_key),
                )
                return
        if action == "del_choose" and len(data) == 4:
            day_key = context.user_data.get("edit_sched_day")
            if not isinstance(day_key, str) or not day_key:
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
                return
            try:
                idx = int(data[3])
            except ValueError:
                await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
                return
            items = SCHEDULE.get(day_key, [])
            if 1 <= idx <= len(items):
                del items[idx - 1]
                save_data()
            await query.edit_message_text(
                text=_render_day_schedule(day_key),
                reply_markup=build_edit_schedule_actions_keyboard(day_key),
            )
            return

        if action == "clear":
            day_key = context.user_data.get("edit_sched_day")
            if not isinstance(day_key, str) or not day_key:
                await query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å")
                return
            SCHEDULE[day_key] = []
            save_data()
            await query.edit_message_text(
                text=_render_day_schedule(day_key),
                reply_markup=build_edit_schedule_actions_keyboard(day_key),
            )
            return

    # fallback ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    await query.edit_message_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=build_admin_menu_keyboard()
    )


