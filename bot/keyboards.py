from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from bot.data import DAY_LABELS, SUBJECTS, get_all_day_keys


def build_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"""
    buttons = [
        [KeyboardButton(text="üìö –ü—Ä–µ–¥–º–µ—Ç—ã"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é")],
        [KeyboardButton(text="üìù –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


def build_main_menu_inline_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """Inline –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)"""
    buttons = [
        [InlineKeyboardButton(text="üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="menu:subjects")],
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—é", callback_data="menu:day")],
        [InlineKeyboardButton(text="üìù –î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="menu:tomorrow")],
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω", callback_data="menu:admin")])
    return InlineKeyboardMarkup(buttons)


def build_subjects_keyboard() -> InlineKeyboardMarkup:
    rows = []
    row = []
    for subject in SUBJECTS.values():
        row.append(InlineKeyboardButton(text=subject.name, callback_data=f"subject:{subject.key}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)


def build_days_keyboard() -> InlineKeyboardMarkup:
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –≤ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ
    from bot.data import SCHEDULE  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    all_keys = get_all_day_keys()
    present = [dk for dk in all_keys if dk in SCHEDULE]
    # –¥–æ–±. –ª—é–±—ã–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–æ–Ω–µ—Ü
    extra = [dk for dk in SCHEDULE.keys() if dk not in present]
    day_keys = present + extra

    rows = []
    row = []
    for dk in day_keys:
        row.append(InlineKeyboardButton(text=DAY_LABELS.get(dk, dk), callback_data=f"day:{dk}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)


def build_admin_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥. –î–ó", callback_data="menu:edit_hw")],
        [InlineKeyboardButton(text="üóìÔ∏è –†–µ–¥. —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu:edit_sched")],
        [InlineKeyboardButton(text="üìÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏", callback_data="menu:days_manage")],
        [InlineKeyboardButton(text="üî§ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="menu:rename_subj")],
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç (–≤ –±–∞–∑—É)", callback_data="menu:add_subject")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="menu:del_subject")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")],
    ]
    return InlineKeyboardMarkup(buttons)


def build_back_to_main_only_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")]]
    )


def build_manage_days_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –¥–µ–Ω—å", callback_data="menu:days_manage:create")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å", callback_data="menu:days_manage:delete")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:admin")],
    ])


def build_days_choice_keyboard(prefix: str, keys: list[str]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for dk in keys:
        row.append(InlineKeyboardButton(text=DAY_LABELS.get(dk, dk), callback_data=f"{prefix}{dk}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:days_manage")])
    return InlineKeyboardMarkup(rows)


def build_days_to_create_keyboard() -> InlineKeyboardMarkup:
    from bot.data import SCHEDULE  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    all_keys = get_all_day_keys()
    missing = [dk for dk in all_keys if dk not in SCHEDULE]
    return build_days_choice_keyboard("edit:days:create:", missing)


def build_days_to_delete_keyboard() -> InlineKeyboardMarkup:
    from bot.data import SCHEDULE  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    present = list(SCHEDULE.keys())
    # –ü–æ—Ä—è–¥–æ–∫ –ø–æ all_keys, –∞ –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    all_keys = get_all_day_keys()
    ordered = [dk for dk in all_keys if dk in present] + [dk for dk in present if dk not in all_keys]
    return build_days_choice_keyboard("edit:days:delete:", ordered)


def build_subjects_keyboard_with_prefix(prefix: str) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for subject in SUBJECTS.values():
        row.append(InlineKeyboardButton(text=subject.name, callback_data=f"{prefix}{subject.key}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)


def build_subjects_keyboard_for_day_add(day_key: str) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for subject in SUBJECTS.values():
        row.append(InlineKeyboardButton(text=subject.name, callback_data=f"edit:sched:add:{subject.key}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å", callback_data="edit:sched:days:clear")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="menu:edit_sched")])
    return InlineKeyboardMarkup(rows)


def build_days_keyboard_with_prefix(prefix: str) -> InlineKeyboardMarkup:
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ build_days_keyboard ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏ –ø–µ—Ä–≤—ã–º–∏
    from bot.data import SCHEDULE  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    all_keys = get_all_day_keys()
    present = [dk for dk in all_keys if dk in SCHEDULE]
    extra = [dk for dk in SCHEDULE.keys() if dk not in present]
    day_keys = present + extra
    rows = []
    row = []
    for dk in day_keys:
        row.append(InlineKeyboardButton(text=DAY_LABELS.get(dk, dk), callback_data=f"{prefix}{dk}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(rows)


def build_edit_schedule_actions_keyboard(day_key: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="edit:sched:add")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫", callback_data="edit:sched:edit")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="edit:sched:del")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å", callback_data="edit:sched:days:clear")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –¥–Ω—è", callback_data="menu:edit_sched")],
    ]
    return InlineKeyboardMarkup(rows)


def build_edit_lessons_keyboard(day_key: str) -> InlineKeyboardMarkup:
    from bot.data import SCHEDULE, SUBJECTS  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

    lessons = SCHEDULE.get(day_key, [])
    rows = []
    row = []
    for i, subject_key in enumerate(lessons, 1):
        subject = SUBJECTS.get(subject_key)
        subject_name = subject.name if subject else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ({subject_key})"
        row.append(InlineKeyboardButton(text=f"{i}. {subject_name}", callback_data=f"edit:sched:edit_choose:{i}"))
        if len(row) == 1:  # –ü–æ –æ–¥–Ω–æ–º—É —É—Ä–æ–∫—É –≤ —Ä—è–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit:sched:day:{day_key}")])
    return InlineKeyboardMarkup(rows)


def build_delete_indices_keyboard(day_key: str) -> InlineKeyboardMarkup:
    from bot.data import SCHEDULE  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤

    indices = list(range(1, len(SCHEDULE.get(day_key, [])) + 1))
    rows = []
    row = []
    for i in indices:
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"edit:sched:del_choose:{i}"))
        if len(row) == 4:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"edit:sched:day:{day_key}")])
    return InlineKeyboardMarkup(rows)



