#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è Timeweb
–° –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –º–µ–Ω—é
"""

import os
import logging
import json
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)

# –§–∞–π–ª –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "bot_data.json"

def load_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "subjects": [],
            "schedule": {},
            "messages_count": 0,
            "users": {}
        }

def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="menu:subjects")],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="menu:schedule")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="menu:add_subject")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu:help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_subjects_keyboard(subjects):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    keyboard = []
    for i, subject in enumerate(subjects):
        keyboard.append([InlineKeyboardButton(f"üìñ {subject}", callback_data=f"subject:{i}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(keyboard)

def get_schedule_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day:monday")],
        [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day:tuesday")],
        [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="day:wednesday")],
        [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day:thursday")],
        [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day:friday")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_day_keyboard(day):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"edit:{day}:add")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{day}:edit")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:schedule")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    data = load_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if "users" not in data:
        data["users"] = {}
    
    data["users"][str(user_id)] = {
        "username": update.effective_user.username,
        "first_name": update.effective_user.first_name,
        "last_name": update.effective_user.last_name
    }
    save_data(data)
    
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
"""
    await update.message.reply_text(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")[1]
    
    if data == "subjects":
        subjects = load_data().get("subjects", [])
        if not subjects:
            await query.edit_message_text(
                "üìù –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.",
                reply_markup=get_subjects_keyboard([])
            )
        else:
            await query.edit_message_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
                reply_markup=get_subjects_keyboard(subjects)
            )
    
    elif data == "schedule":
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_schedule_keyboard()
        )
    
    elif data == "add_subject":
        await query.edit_message_text(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:main")]])
        )
        context.user_data["waiting_for_subject"] = True
    
    elif data == "stats":
        data_obj = load_data()
        subjects_count = len(data_obj.get("subjects", []))
        messages_count = data_obj.get("messages_count", 0)
        users_count = len(data_obj.get("users", {}))
        
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"üè† –•–æ—Å—Ç–∏–Ω–≥: Timeweb",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:main")]])
        )
    
    elif data == "help":
        await query.edit_message_text(
            "‚ùì –ü–æ–º–æ—â—å:\n\n"
            "üìö –ü—Ä–µ–¥–º–µ—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n"
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:main")]])
        )

async def subject_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    subject_index = int(query.data.split(":")[1])
    data = load_data()
    subjects = data.get("subjects", [])
    
    if subject_index < len(subjects):
        subject = subjects[subject_index]
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_subject:{subject_index}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_subject:{subject_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back:subjects")]
        ]
        
        await query.edit_message_text(
            f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def day_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    day = query.data.split(":")[1]
    day_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", 
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞"
    }
    
    day_name = day_names.get(day, day)
    data = load_data()
    schedule = data.get("schedule", {})
    day_subjects = schedule.get(day, [])
    
    if not day_subjects:
        text = f"üìÖ {day_name}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ."
    else:
        text = f"üìÖ {day_name}\n\n–ü—Ä–µ–¥–º–µ—Ç—ã:\n" + "\n".join(f"‚Ä¢ {subject}" for subject in day_subjects)
    
    await query.edit_message_text(
        text,
        reply_markup=get_day_keyboard(day)
    )

async def edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split(":")
    if len(parts) >= 3:
        action_type = parts[1]
        action = parts[2]
        
        if action_type == "add":
            await query.edit_message_text(
                f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ {action}:\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back:day:{action}")]])
            )
            context.user_data["waiting_for_day_subject"] = action
        elif action_type == "edit":
            await query.edit_message_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {action}",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back:day:{action}")]])
            )

async def back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()
    
    back_to = query.data.split(":")[1]
    
    if back_to == "main":
        await query.edit_message_text(
            "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )
    elif back_to == "subjects":
        data = load_data()
        subjects = data.get("subjects", [])
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=get_subjects_keyboard(subjects)
        )
    elif back_to == "schedule":
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_schedule_keyboard()
        )

async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    data = load_data()
    data["messages_count"] = data.get("messages_count", 0) + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
    if context.user_data.get("waiting_for_subject"):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        if "subjects" not in data:
            data["subjects"] = []
        
        data["subjects"].append(user_text)
        save_data(data)
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{user_text}' –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data["waiting_for_subject"] = False
    
    elif context.user_data.get("waiting_for_day_subject"):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        day = context.user_data["waiting_for_day_subject"]
        if "schedule" not in data:
            data["schedule"] = {}
        if day not in data["schedule"]:
            data["schedule"][day] = []
        
        data["schedule"][day].append(user_text)
        save_data(data)
        
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{user_text}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
            reply_markup=get_main_menu_keyboard()
        )
        context.user_data["waiting_for_day_subject"] = None
    
    else:
        # –û–±—ã—á–Ω–æ–µ —ç—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        save_data(data)
        await update.message.reply_text(
            f"üí¨ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {user_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logging.error("BOT_TOKEN environment variable is not set!")
        return
    
    logging.info("Starting Telegram bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(menu_callback, pattern=r"^menu:"))
    application.add_handler(CallbackQueryHandler(subject_callback, pattern=r"^subject:"))
    application.add_handler(CallbackQueryHandler(day_callback, pattern=r"^day:"))
    application.add_handler(CallbackQueryHandler(edit_callback, pattern=r"^edit:"))
    application.add_handler(CallbackQueryHandler(back_callback, pattern=r"^back:"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("Bot is starting...")
    try:
        application.run_polling(close_loop=False, drop_pending_updates=True)
    except Exception as e:
        logging.error(f"Bot error: {e}")

if __name__ == "__main__":
    main()
